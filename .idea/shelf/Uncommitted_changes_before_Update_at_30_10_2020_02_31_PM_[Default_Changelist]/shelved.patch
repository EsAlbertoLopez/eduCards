Index: app/src/main/java/mx/itesm/rano/eduCards/fragments/FragmentSignUp.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mx.itesm.rano.eduCards.fragments\r\n\r\nimport android.content.Context\r\nimport android.net.ConnectivityManager\r\nimport android.net.NetworkInfo\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.fragment.app.Fragment\r\nimport com.google.android.gms.tasks.OnCompleteListener\r\nimport com.google.firebase.auth.AuthResult\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport com.google.firebase.auth.FirebaseUser\r\nimport com.google.firebase.database.FirebaseDatabase\r\nimport mx.itesm.rano.eduCards.R\r\nimport mx.itesm.rano.eduCards.activities.MainActivity\r\nimport mx.itesm.rano.eduCards.models.Instructor\r\n\r\n\r\nclass FragmentSignUp : Fragment() {\r\n    private lateinit var root: View\r\n    private lateinit var inflater: LayoutInflater\r\n    private lateinit var mainActivity: MainActivity\r\n    private lateinit var tvSubtitle : TextView\r\n    private lateinit var etInstitute: EditText\r\n    private lateinit var etInstructor: EditText\r\n    private lateinit var etEmail: EditText\r\n    private lateinit var etUsername: EditText\r\n    private lateinit var etPassword: EditText\r\n    private lateinit var btnSignUp: Button\r\n    private lateinit var connectivityManager: ConnectivityManager\r\n    private lateinit var database: FirebaseDatabase\r\n    private lateinit var mAuth: FirebaseAuth\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        mAuth = FirebaseAuth.getInstance()\r\n        database = FirebaseDatabase.getInstance()\r\n    }\r\n\r\n    override fun onStart() {\r\n        super.onStart()\r\n        val currentUser = mAuth.currentUser\r\n        //updateUI(currentUser)\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n        this.inflater = inflater\r\n        root = inflater.inflate(R.layout.fragment_sign_up, container, false)\r\n        mainActivity = context as MainActivity\r\n        connectivityManager = mainActivity.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\r\n        setLayoutVariables()\r\n        checkConnectivityStatus()\r\n        setSignUpButton()\r\n        setReportDetails()\r\n        return root\r\n\r\n    }\r\n\r\n    private fun setLayoutVariables() {\r\n        tvSubtitle = root.findViewById<View>(R.id.tvSubtitle) as TextView\r\n        etInstitute = root.findViewById<View>(R.id.editTextTextInstitute) as EditText\r\n        etInstructor = root.findViewById<View>(R.id.editTextTextInstructorName) as EditText\r\n        etEmail = root.findViewById<View>(R.id.editTextTextEmail) as EditText\r\n        etUsername = root.findViewById<View>(R.id.editTextTextUsername) as EditText\r\n        etPassword = root.findViewById<View>(R.id.editTextTextPassword) as EditText\r\n    }\r\n\r\n    private fun setSignUpButton() {\r\n        btnSignUp = root.findViewById<View>(R.id.btnSignUp) as Button\r\n        btnSignUp.setOnClickListener {\r\n            if (etEmail != null) {\r\n                if (etPassword != null) {\r\n                    val institute = etInstitute.text.toString()\r\n                    val instructor = etInstructor.text.toString()\r\n                    val email = etEmail.text.toString()\r\n                    val username = etUsername.text.toString()\r\n                    val password = etPassword.text.toString()\r\n                    if (institute.isNotEmpty()\r\n                        || instructor.isNotEmpty()\r\n                        || email.isNotEmpty()\r\n                        || username.isNotEmpty()\r\n                        || password.isNotEmpty()) {\r\n                        if (username.contains(\".\")\r\n                            || username.contains(\"#\")\r\n                            || username.contains(\"$\")\r\n                            || username.contains(\"[\")\r\n                            || username.contains(\"]\")\r\n                            || username.contains(\" \")) {\r\n                            Toast.makeText(context, \"Error: Username cannot contain ., #, $, [, ] and ' '\", Toast.LENGTH_LONG)\r\n                                .show()\r\n                        } else {\r\n                            if (password.length >= 6) {\r\n                                signUpAccount(username, instructor, institute, password, email)\r\n                            } else {\r\n                                Toast.makeText(context, \"Error: Password length cannot be less than 6 characters\", Toast.LENGTH_LONG)\r\n                                    .show()\r\n                            }\r\n                        }\r\n                    } else {\r\n                        Toast.makeText(context, \"Error: Empty Sign Up field(s)\", Toast.LENGTH_LONG)\r\n                            .show()\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        btnSignUp.isEnabled = false\r\n    }\r\n\r\n    private fun signUpAccount(username: String, instructor: String, institute: String, password: String, email: String) {\r\n        mAuth.createUserWithEmailAndPassword(email, password)\r\n            .addOnCompleteListener(this.context as MainActivity,\r\n                OnCompleteListener<AuthResult?> { task ->\r\n                    if (task.isSuccessful) {\r\n                        // Sign in success, update UI with the signed-in user's information\r\n                        println(\"createUserWithEmail:success\")\r\n                        val user = mAuth.currentUser\r\n                        writeDataToCloud(username.toLowerCase(), instructor, institute, email)\r\n                        user?.sendEmailVerification()\r\n                        updateUI(user)\r\n                        Toast.makeText(\r\n                            this.context as MainActivity, \"An email has been sent to verify your account\",\r\n                            Toast.LENGTH_LONG\r\n                        ).show()\r\n                    } else {\r\n                        // If sign in fails, display a message to the user.\r\n                        println(\"createUserWithEmail:failure ${task.exception}\")\r\n                        Toast.makeText(\r\n                            this.context as MainActivity, \"Sign Up failed: ${task.exception?.message}\",\r\n                            Toast.LENGTH_LONG\r\n                        ).show()\r\n                        updateUI(null)\r\n                    }\r\n                    // ...\r\n                })\r\n    }\r\n\r\n    private fun writeDataToCloud(username: String, instructor: String, institute: String, email: String) {\r\n        val instructor = Instructor(username, instructor, institute, email)\r\n        val reference = database.getReference(\"/Instructors/$username\")\r\n        reference.setValue(instructor)\r\n    }\r\n\r\n    private fun updateUI(currentUser: FirebaseUser?) {\r\n        if (currentUser != null) {\r\n            println(\"Successful Sign Up Attempt!\")\r\n            println(\"Waiting for Email Confirmation for Signed Up User : ${currentUser?.displayName}\")\r\n            etInstitute.isEnabled = false\r\n            etInstructor.isEnabled = false\r\n            etEmail.isEnabled = false\r\n            etUsername.isEnabled = false\r\n            etPassword.isEnabled = false\r\n            btnSignUp.isEnabled = false\r\n        } else {\r\n            print(\"Failed Sign Up Attempt\")\r\n        }\r\n    }\r\n\r\n    private fun setReportDetails() {\r\n        etInstitute.addTextChangedListener (object : TextWatcher {\r\n            override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {\r\n                checkConnectivityStatus()\r\n            }\r\n\r\n            override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {\r\n                // Fires right before text is changing\r\n            }\r\n\r\n            override fun afterTextChanged(s: Editable) {\r\n                btnSignUp.isEnabled = !((etInstitute.text.isEmpty()\r\n                        || etInstitute.text.isEmpty()\r\n                        || etInstructor.text.isEmpty()\r\n                        || etEmail.text.isEmpty()\r\n                        || etUsername.text.isEmpty()\r\n                        || etPassword.text.isEmpty())\r\n                        || !checkConnectivityStatus())\r\n            }\r\n        })\r\n        etInstitute.isEnabled = true\r\n        etInstructor.addTextChangedListener (object : TextWatcher {\r\n            override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {\r\n                checkConnectivityStatus()\r\n            }\r\n\r\n            override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {\r\n                // Fires right before text is changing\r\n            }\r\n\r\n            override fun afterTextChanged(s: Editable) {\r\n                btnSignUp.isEnabled = !((etInstitute.text.isEmpty()\r\n                        || etInstitute.text.isEmpty()\r\n                        || etInstructor.text.isEmpty()\r\n                        || etEmail.text.isEmpty()\r\n                        || etUsername.text.isEmpty()\r\n                        || etPassword.text.isEmpty())\r\n                        || !checkConnectivityStatus())\r\n            }\r\n        })\r\n        etInstructor.isEnabled = true\r\n        etEmail.addTextChangedListener (object : TextWatcher {\r\n            override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {\r\n                checkConnectivityStatus()\r\n            }\r\n\r\n            override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {\r\n                // Fires right before text is changing\r\n            }\r\n\r\n            override fun afterTextChanged(s: Editable) {\r\n                btnSignUp.isEnabled = !((etInstitute.text.isEmpty()\r\n                        || etInstitute.text.isEmpty()\r\n                        || etInstructor.text.isEmpty()\r\n                        || etEmail.text.isEmpty()\r\n                        || etUsername.text.isEmpty()\r\n                        || etPassword.text.isEmpty())\r\n                        || !checkConnectivityStatus())\r\n            }\r\n        })\r\n        etEmail.isEnabled = true\r\n        etUsername.addTextChangedListener (object : TextWatcher {\r\n            override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {\r\n                checkConnectivityStatus()\r\n            }\r\n\r\n            override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {\r\n                // Fires right before text is changing\r\n            }\r\n\r\n            override fun afterTextChanged(s: Editable) {\r\n                btnSignUp.isEnabled = !((etInstitute.text.isEmpty()\r\n                        || etInstitute.text.isEmpty()\r\n                        || etInstructor.text.isEmpty()\r\n                        || etEmail.text.isEmpty()\r\n                        || etUsername.text.isEmpty()\r\n                        || etPassword.text.isEmpty())\r\n                        || !checkConnectivityStatus())\r\n            }\r\n        })\r\n        etPassword.isEnabled = true\r\n        etPassword.addTextChangedListener (object : TextWatcher {\r\n            override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {\r\n                checkConnectivityStatus()\r\n            }\r\n\r\n            override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {\r\n                // Fires right before text is changing\r\n            }\r\n\r\n            override fun afterTextChanged(s: Editable) {\r\n                btnSignUp.isEnabled = !((etInstitute.text.isEmpty()\r\n                        || etInstitute.text.isEmpty()\r\n                        || etInstructor.text.isEmpty()\r\n                        || etEmail.text.isEmpty()\r\n                        || etUsername.text.isEmpty()\r\n                        || etPassword.text.isEmpty())\r\n                        || !checkConnectivityStatus())\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun checkConnectivityStatus(): Boolean {\r\n        val activeNetwork: NetworkInfo? = connectivityManager.activeNetworkInfo\r\n        val isConnected: Boolean = activeNetwork?.isConnectedOrConnecting == true\r\n        if (!isConnected) {\r\n            tvSubtitle.text = \"You are not connected\"\r\n            tvSubtitle.setTextColor(resources.getColor(R.color.colorWarning))\r\n        } else {\r\n            //tvSubtitle.setTextColor(resources.getColor(android:attr/textColorPrimary))\r\n            tvSubtitle.text = \"Create your Account\"\r\n        }\r\n        return isConnected\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mx/itesm/rano/eduCards/fragments/FragmentSignUp.kt	(revision f1f42419fe2f48d5829e8d78117b352b5ba776eb)
+++ app/src/main/java/mx/itesm/rano/eduCards/fragments/FragmentSignUp.kt	(date 1604089552479)
@@ -1,6 +1,8 @@
 package mx.itesm.rano.eduCards.fragments
 
+import android.content.BroadcastReceiver
 import android.content.Context
+import android.content.Intent
 import android.net.ConnectivityManager
 import android.net.NetworkInfo
 import android.os.Bundle
@@ -21,6 +23,7 @@
 import com.google.firebase.database.FirebaseDatabase
 import mx.itesm.rano.eduCards.R
 import mx.itesm.rano.eduCards.activities.MainActivity
+import mx.itesm.rano.eduCards.models.ConnectivityChangeReceiver
 import mx.itesm.rano.eduCards.models.Instructor
 
 
@@ -35,6 +38,7 @@
     private lateinit var etUsername: EditText
     private lateinit var etPassword: EditText
     private lateinit var btnSignUp: Button
+    private lateinit var connectivityChangeReceiver: BroadcastReceiver
     private lateinit var connectivityManager: ConnectivityManager
     private lateinit var database: FirebaseDatabase
     private lateinit var mAuth: FirebaseAuth
@@ -61,6 +65,7 @@
         mainActivity = context as MainActivity
         connectivityManager = mainActivity.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager
         setLayoutVariables()
+        setConnectivityChangeReceiver()
         checkConnectivityStatus()
         setSignUpButton()
         setReportDetails()
@@ -269,6 +274,16 @@
         })
     }
 
+    private fun setConnectivityChangeReceiver() {
+        connectivityChangeReceiver = object : BroadcastReceiver() {
+            override fun onReceive(p0: Context?, p1: Intent?) {
+                if (p1?.action.equals("android.net.conn.CONNECTIVITY_CHANGE", false)) {
+                    checkConnectivityStatus()
+                }
+            }
+        }
+    }
+
     private fun checkConnectivityStatus(): Boolean {
         val activeNetwork: NetworkInfo? = connectivityManager.activeNetworkInfo
         val isConnected: Boolean = activeNetwork?.isConnectedOrConnecting == true
@@ -278,6 +293,7 @@
         } else {
             //tvSubtitle.setTextColor(resources.getColor(android:attr/textColorPrimary))
             tvSubtitle.text = "Create your Account"
+            tvSubtitle.setTextColor(mainActivity.resolveColorAttr(mainActivity, android.R.attr.textColorPrimary))
         }
         return isConnected
     }
Index: app/src/main/java/mx/itesm/rano/eduCards/activities/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package mx.itesm.rano.eduCards.activities\r\n\r\nimport android.content.Intent\r\nimport android.graphics.Rect\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport androidx.appcompat.app.ActionBar\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.fragment.app.FragmentTransaction\r\nimport kotlinx.android.synthetic.main.activity_main.*\r\nimport mx.itesm.rano.eduCards.R\r\nimport mx.itesm.rano.eduCards.fragments.*\r\nimport mx.itesm.rano.eduCards.interfaces.ListListener\r\nimport java.text.DateFormat\r\nimport java.util.*\r\n\r\n\r\nclass MainActivity : AppCompatActivity(), ListListener {\r\n    lateinit var actionBar: ActionBar\r\n    lateinit var calendar: Calendar\r\n    lateinit var currentDate: String\r\n    //lateinit var fragmentHome: FragmentHome\r\n    //lateinit var fragmentCourse : FragmentCourse\r\n    //lateinit var fragmentLive: FragmentLive\r\n    //lateinit var fragmentSettings : FragmentSettings\r\n    //lateinit var currentFragment : Fragment\r\n    var username: String? = null\r\n    var course = \"\"\r\n    var group = \"\"\r\n    var student = \"\"\r\n    var keyEvent = \"\"\r\n    var loginFlag:Boolean = true\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        setTheme(R.style.AppTheme)\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_main)\r\n        setInitialUI()\r\n        setCalendar()\r\n        printPug()\r\n    }\r\n\r\n    private fun setInitialUI() {\r\n        //fragmentSettings = FragmentSettings()\r\n        if (loginFlag == true) {\r\n            activateApplication(\"Home\")\r\n            setFragment(FragmentHome())\r\n            //currentFragment = fragmentHome\r\n        } else {\r\n            deactivateApplication(\"Home\")\r\n            setFragment(FragmentAuthenticationLock(\"Home\"))\r\n        }\r\n        bottomNavBar.menu.findItem(R.id.home).setEnabled(false)\r\n        hideBottomNavBarWhenKeyboardIsShown()\r\n    }\r\n\r\n    fun activateApplication(screen: String) {\r\n        setActiveBottomNavBar()\r\n        setActiveUI(screen)\r\n        //setMainFragments()\r\n    }\r\n\r\n    fun deactivateApplication(screen: String) {\r\n        setInactiveBottomNavBar()\r\n        setInactiveUI(screen)\r\n    }\r\n\r\n   // private fun setMainFragments() {\r\n   //     fragmentHome = FragmentHome()\r\n   //     fragmentCourse = FragmentCourse()\r\n   //     fragmentLive = FragmentLive()\r\n   // }\r\n\r\n    private fun setActiveBottomNavBar() {\r\n        bottomNavBar.setOnNavigationItemSelectedListener { item ->\r\n            when (item.itemId) {\r\n                R.id.home -> {\r\n                    window.statusBarColor = resources.getColor(R.color.colorR)\r\n                    //bottomNavBar.itemIconTintList =\r\n                    //    resources.getColorStateList(R.color.colorPrimary)\r\n                    //bottomNavBar.itemTextColor = resources.getColorStateList(R.color.colorPrimary)\r\n                    ivGradient.setColorFilter(\r\n                        ContextCompat.getColor(\r\n                            this,\r\n                            R.color.colorR\r\n                        ), android.graphics.PorterDuff.Mode.MULTIPLY\r\n                    )\r\n                    bottomNavBar.menu.findItem(R.id.home).setEnabled(false)\r\n                    bottomNavBar.menu.findItem(R.id.general).setEnabled(true)\r\n                    bottomNavBar.menu.findItem(R.id.live).setEnabled(true)\r\n                    bottomNavBar.menu.findItem(R.id.settings).setEnabled(true)\r\n                    setFragment(FragmentHome())\r\n                    //currentFragment = fragmentHome\r\n                }\r\n                R.id.general -> {\r\n                    window.statusBarColor = resources.getColor(R.color.colorA)\r\n                    //bottomNavBar.itemIconTintList =\r\n                    //    resources.getColorStateList(R.color.colorPrimary)\r\n                    //bottomNavBar.itemTextColor = resources.getColorStateList(R.color.colorPrimary)\r\n                    ivGradient.setColorFilter(\r\n                        ContextCompat.getColor(\r\n                            this,\r\n                            R.color.colorA\r\n                        ), android.graphics.PorterDuff.Mode.MULTIPLY\r\n                    )\r\n                    bottomNavBar.menu.findItem(R.id.home).setEnabled(true)\r\n                    bottomNavBar.menu.findItem(R.id.general).setEnabled(false)\r\n                    bottomNavBar.menu.findItem(R.id.live).setEnabled(true)\r\n                    bottomNavBar.menu.findItem(R.id.settings).setEnabled(true)\r\n                    setFragment(FragmentCourse())\r\n                }\r\n                R.id.live -> {\r\n                    window.statusBarColor = resources.getColor(R.color.colorN)\r\n                    //bottomNavBar.itemIconTintList =\r\n                    //    resources.getColorStateList(R.color.colorPrimary)\r\n                    //bottomNavBar.itemTextColor = resources.getColorStateList(R.color.colorPrimary)\r\n                    ivGradient.setColorFilter(\r\n                        ContextCompat.getColor(\r\n                            this,\r\n                            R.color.colorN\r\n                        ), android.graphics.PorterDuff.Mode.MULTIPLY\r\n                    )\r\n                    bottomNavBar.menu.findItem(R.id.home).setEnabled(true)\r\n                    bottomNavBar.menu.findItem(R.id.general).setEnabled(true)\r\n                    bottomNavBar.menu.findItem(R.id.live).setEnabled(false)\r\n                    bottomNavBar.menu.findItem(R.id.settings).setEnabled(true)\r\n                    setFragment(FragmentLive())\r\n                }\r\n                R.id.settings -> {\r\n                    window.statusBarColor = resources.getColor(R.color.colorO)\r\n                    //bottomNavBar.itemIconTintList =\r\n                    //    resources.getColorStateList(R.color.colorPrimary)\r\n                    //bottomNavBar.itemTextColor = resources.getColorStateList(R.color.colorPrimary)\r\n                    ivGradient.setColorFilter(\r\n                        ContextCompat.getColor(\r\n                            this,\r\n                            R.color.colorO\r\n                        ), android.graphics.PorterDuff.Mode.MULTIPLY\r\n                    )\r\n                    bottomNavBar.menu.findItem(R.id.home).setEnabled(true)\r\n                    bottomNavBar.menu.findItem(R.id.general).setEnabled(true)\r\n                    bottomNavBar.menu.findItem(R.id.live).setEnabled(true)\r\n                    bottomNavBar.menu.findItem(R.id.settings).setEnabled(false)\r\n                    setFragment(FragmentSettings())\r\n                    //deactivateApplication(\"Settings\")\r\n                }\r\n            }\r\n            true\r\n        }\r\n    }\r\n\r\n    private fun setInactiveBottomNavBar() {\r\n        bottomNavBar.setOnNavigationItemSelectedListener { item ->\r\n            when (item.itemId) {\r\n                R.id.home -> {\r\n                    window.statusBarColor = resources.getColor(R.color.colorDeactivated)\r\n                    //bottomNavBar.itemIconTintList =\r\n                    //    resources.getColorStateList(R.color.colorPrimary)\r\n                    //bottomNavBar.itemTextColor = resources.getColorStateList(R.color.colorPrimary)\r\n                    ivGradient.setColorFilter(\r\n                        ContextCompat.getColor(\r\n                            this,\r\n                            R.color.colorDeactivated\r\n                        ), android.graphics.PorterDuff.Mode.MULTIPLY\r\n                    )\r\n                    bottomNavBar.menu.findItem(R.id.home).setEnabled(false)\r\n                    bottomNavBar.menu.findItem(R.id.general).setEnabled(true)\r\n                    bottomNavBar.menu.findItem(R.id.live).setEnabled(true)\r\n                    bottomNavBar.menu.findItem(R.id.settings).setEnabled(true)\r\n                    //var fragmentAuthenticationLock = FragmentAuthenticationLock(\"Home\")\r\n                    setFragment(FragmentAuthenticationLock(\"Home\"))\r\n                    //currentFragment = fragmentAuthenticationLock\r\n                }\r\n                R.id.general -> {\r\n                    window.statusBarColor = resources.getColor(R.color.colorDeactivated)\r\n                    //bottomNavBar.itemIconTintList =\r\n                    //    resources.getColorStateList(R.color.colorPrimary)\r\n                    //bottomNavBar.itemTextColor = resources.getColorStateList(R.color.colorPrimary)\r\n                    ivGradient.setColorFilter(\r\n                        ContextCompat.getColor(\r\n                            this,\r\n                            R.color.colorDeactivated\r\n                        ), android.graphics.PorterDuff.Mode.MULTIPLY\r\n                    )\r\n                    bottomNavBar.menu.findItem(R.id.home).setEnabled(true)\r\n                    bottomNavBar.menu.findItem(R.id.general).setEnabled(false)\r\n                    bottomNavBar.menu.findItem(R.id.live).setEnabled(true)\r\n                    bottomNavBar.menu.findItem(R.id.settings).setEnabled(true)\r\n                    //var fragmentAuthenticationLock = FragmentAuthenticationLock(\"Geeral\")\r\n                    setFragment(FragmentAuthenticationLock(\"General\"))\r\n                    //currentFragment = fragmentAuthenticationLock\r\n                }\r\n                R.id.live -> {\r\n                    window.statusBarColor = resources.getColor(R.color.colorDeactivated)\r\n                    //bottomNavBar.itemIconTintList =\r\n                    //    resources.getColorStateList(R.color.colorPrimary)\r\n                    //bottomNavBar.itemTextColor = resources.getColorStateList(R.color.colorPrimary)\r\n                    ivGradient.setColorFilter(\r\n                        ContextCompat.getColor(\r\n                            this,\r\n                            R.color.colorDeactivated\r\n                        ), android.graphics.PorterDuff.Mode.MULTIPLY\r\n                    )\r\n                    bottomNavBar.menu.findItem(R.id.home).setEnabled(true)\r\n                    bottomNavBar.menu.findItem(R.id.general).setEnabled(true)\r\n                    bottomNavBar.menu.findItem(R.id.live).setEnabled(false)\r\n                    bottomNavBar.menu.findItem(R.id.settings).setEnabled(true)\r\n                    //var fragmentAuthenticationLock = FragmentAuthenticationLock(\"Live\")\r\n                    setFragment(FragmentAuthenticationLock(\"Live\"))\r\n                    //currentFragment = fragmentAuthenticationLock\r\n                }\r\n                R.id.settings -> {\r\n                    window.statusBarColor = resources.getColor(R.color.colorO)\r\n                    //bottomNavBar.itemIconTintList =\r\n                    //    resources.getColorStateList(R.color.colorPrimary)\r\n                    //bottomNavBar.itemTextColor = resources.getColorStateList(R.color.colorPrimary)\r\n                    ivGradient.setColorFilter(\r\n                        ContextCompat.getColor(\r\n                            this,\r\n                            R.color.colorO\r\n                        ), android.graphics.PorterDuff.Mode.MULTIPLY\r\n                    )\r\n                    bottomNavBar.menu.findItem(R.id.home).setEnabled(true)\r\n                    bottomNavBar.menu.findItem(R.id.general).setEnabled(true)\r\n                    bottomNavBar.menu.findItem(R.id.live).setEnabled(true)\r\n                    bottomNavBar.menu.findItem(R.id.settings).setEnabled(false)\r\n                    setFragment(FragmentSettings())\r\n                    //currentFragment = fragmentSettings\r\n                    //activateApplication(\"Settings\")\r\n                }\r\n            }\r\n            true\r\n        }\r\n    }\r\n\r\n    private fun hideBottomNavBarWhenKeyboardIsShown() {\r\n        window.decorView.viewTreeObserver.addOnGlobalLayoutListener {\r\n            val r = Rect()\r\n            window.decorView.getWindowVisibleDisplayFrame(r)\r\n            val screenHeight = window.decorView.rootView.height\r\n            val keypadHeight: Int = screenHeight - r.bottom\r\n            if (keypadHeight > screenHeight * 0.15) {\r\n                bottomNavBar.visibility = View.GONE\r\n                ivGradient.visibility = View.GONE\r\n            } else {\r\n                bottomNavBar.visibility = View.VISIBLE\r\n                ivGradient.visibility = View.VISIBLE\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun setActiveUI(screen: String) {\r\n        var color = 0\r\n        when (screen) {\r\n            \"Home\" -> color = R.color.colorR\r\n            \"General\" -> color = R.color.colorA\r\n            \"Live\" -> color = R.color.colorN\r\n            \"Settings\" -> color = R.color.colorO\r\n        }\r\n        actionBar = getSupportActionBar()!!\r\n        if(actionBar != null) {\r\n            actionBar?.hide()\r\n        }\r\n        window.statusBarColor = resources.getColor(color)\r\n        //bottomNavBar.itemIconTintList = resources.getColorStateList(R.color.colorPrimary)\r\n        //bottomNavBar.itemTextColor = resources.getColorStateList(R.color.colorPrimary)\r\n        ivGradient.setColorFilter(\r\n            ContextCompat.getColor(\r\n                this,\r\n                color\r\n            ), android.graphics.PorterDuff.Mode.MULTIPLY\r\n        )\r\n        //bottomNavBar.menu.findItem(R.id.home).setEnabled(false)\r\n    }\r\n\r\n    private fun setInactiveUI(screen: String) {\r\n        var color = 0\r\n        when (screen) {\r\n            \"Home\", \"General\", \"Live\" -> color = R.color.colorDeactivated\r\n            \"Settings\" -> color = R.color.colorO\r\n        }\r\n        actionBar = getSupportActionBar()!!\r\n        if(actionBar != null) {\r\n            actionBar?.hide()\r\n        }\r\n        window.statusBarColor = resources.getColor(color)\r\n        //bottomNavBar.itemIconTintList = resources.getColorStateList(R.color.colorPrimary)\r\n        //bottomNavBar.itemTextColor = resources.getColorStateList(R.color.colorPrimary)\r\n        ivGradient.setColorFilter(\r\n            ContextCompat.getColor(\r\n                this,\r\n                color\r\n            ), android.graphics.PorterDuff.Mode.MULTIPLY\r\n        )\r\n        //bottomNavBar.menu.findItem(R.id.home).setEnabled(false)\r\n    }\r\n\r\n    private fun setFragment(fragment: Fragment) {\r\n        println(fragment.javaClass.toString())\r\n        supportFragmentManager.beginTransaction()\r\n            .replace(R.id.fragmentContainer, fragment)\r\n            .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE)\r\n            .commit()\r\n    }\r\n\r\n    private fun setFragmentWithBackStack(fragment: Fragment) {\r\n        println(fragment.javaClass.toString())\r\n        supportFragmentManager.beginTransaction()\r\n            .replace(R.id.fragmentContainer, fragment)\r\n            .addToBackStack(fragment.toString())\r\n            .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE)\r\n            .commit()\r\n    }\r\n\r\n    private fun setActivity(appCompatActivity: AppCompatActivity) {\r\n        val intent = Intent(this, appCompatActivity::class.java)\r\n        startActivity(intent)\r\n    }\r\n    \r\n    fun setCalendar() {\r\n        calendar = Calendar.getInstance()\r\n        currentDate = DateFormat.getDateInstance(DateFormat.DEFAULT).format(calendar.time)\r\n    }\r\n\r\n    override fun itemClicked(index: Int, element: String) {\r\n        //val detail = Intent(this, ActivityGroupList::class.java)\r\n        //        //detail.putExtra(\"INDEX\", index)\r\n        //        //startActivity(detail)\r\n        var currentFragment = supportFragmentManager.findFragmentById(R.id.fragmentContainer)\r\n        if (currentFragment is FragmentCourse) {\r\n            setFragmentWithBackStack(FragmentGroup(element))\r\n            course = element\r\n        } else if (currentFragment is FragmentGroup) {\r\n            group = element\r\n            setFragmentWithBackStack(FragmentStudent(course, group))\r\n        } else if (currentFragment is FragmentStudent) {\r\n            student = element\r\n            setFragmentWithBackStack(FragmentCauses(course, group, student))\r\n        } else if (currentFragment is FragmentCauses){\r\n            keyEvent = element\r\n            setFragmentWithBackStack(FragmentCardDetail(course, group, student, keyEvent))\r\n        }\r\n    }\r\n\r\n    fun printPug() {\r\n        println(\"User : ${username}\")\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mx/itesm/rano/eduCards/activities/MainActivity.kt	(revision f1f42419fe2f48d5829e8d78117b352b5ba776eb)
+++ app/src/main/java/mx/itesm/rano/eduCards/activities/MainActivity.kt	(date 1604089552472)
@@ -1,9 +1,13 @@
 package mx.itesm.rano.eduCards.activities
 
+import android.content.Context
 import android.content.Intent
 import android.graphics.Rect
 import android.os.Bundle
+import android.util.TypedValue
 import android.view.View
+import androidx.annotation.AttrRes
+import androidx.annotation.ColorInt
 import androidx.appcompat.app.ActionBar
 import androidx.appcompat.app.AppCompatActivity
 import androidx.core.content.ContextCompat
@@ -13,6 +17,7 @@
 import mx.itesm.rano.eduCards.R
 import mx.itesm.rano.eduCards.fragments.*
 import mx.itesm.rano.eduCards.interfaces.ListListener
+import mx.itesm.rano.eduCards.models.ConnectivityChangeReceiver
 import java.text.DateFormat
 import java.util.*
 
@@ -344,6 +349,23 @@
         }
     }
 
+    fun resolveThemeAttr(context: Context, @AttrRes attrRes: Int): TypedValue {
+        val theme = context.theme
+        val typedValue = TypedValue()
+        theme.resolveAttribute(attrRes, typedValue, true)
+        return typedValue
+    }
+
+    @ColorInt
+    fun resolveColorAttr(context: Context, @AttrRes colorAttr: Int): Int {
+        val resolvedAttr = resolveThemeAttr(context, colorAttr)
+        val colorRes = if (resolvedAttr.resourceId != 0)
+            resolvedAttr.resourceId
+        else
+            resolvedAttr.data
+        return ContextCompat.getColor(context, colorRes)
+    }
+
     fun printPug() {
         println("User : ${username}")
     }
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"mx.itesm.rano.eduCards\">\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/AppTheme\">\r\n        <activity android:name=\".activities.ActivityGeneral\"></activity>\r\n        <activity android:name=\".activities.ActivitySignIn\" />\r\n        <activity android:name=\".activities.ActivityStudentList\" />\r\n        <activity android:name=\".activities.ActivityGroupList\" />\r\n        <activity android:name=\".activities.ActivityCardDetail\" />\r\n        <activity android:name=\".activities.MainActivity\"\r\n            android:theme=\"@style/SplashTheme\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision f1f42419fe2f48d5829e8d78117b352b5ba776eb)
+++ app/src/main/AndroidManifest.xml	(date 1604088561092)
@@ -2,6 +2,9 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android"
     package="mx.itesm.rano.eduCards">
 
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
+
+
     <application
         android:allowBackup="true"
         android:icon="@mipmap/ic_launcher"
@@ -9,10 +12,6 @@
         android:roundIcon="@mipmap/ic_launcher_round"
         android:supportsRtl="true"
         android:theme="@style/AppTheme">
-        <activity android:name=".activities.ActivityGeneral"></activity>
-        <activity android:name=".activities.ActivitySignIn" />
-        <activity android:name=".activities.ActivityStudentList" />
-        <activity android:name=".activities.ActivityGroupList" />
         <activity android:name=".activities.ActivityCardDetail" />
         <activity android:name=".activities.MainActivity"
             android:theme="@style/SplashTheme">
Index: app/src/main/java/mx/itesm/rano/eduCards/models/ConnectivityChangeReceiver.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/mx/itesm/rano/eduCards/models/ConnectivityChangeReceiver.kt	(date 1604087466314)
+++ app/src/main/java/mx/itesm/rano/eduCards/models/ConnectivityChangeReceiver.kt	(date 1604087466314)
@@ -0,0 +1,12 @@
+package mx.itesm.rano.eduCards.models
+
+import android.content.BroadcastReceiver
+import android.content.Context
+import android.content.Intent
+import mx.itesm.rano.eduCards.activities.MainActivity
+
+class ConnectivityChangeReceiver(mainActivity: MainActivity) : BroadcastReceiver() {
+    override fun onReceive(p0: Context?, p1: Intent?) {
+        TODO("Not yet implemented")
+    }
+}
\ No newline at end of file
